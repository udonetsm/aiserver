// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package ai_

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransmitService_TransmitFiles_FullMethodName = "/TransmitService/TransmitFiles"
	TransmitService_TransmitText_FullMethodName  = "/TransmitService/TransmitText"
	TransmitService_DeleteFiles_FullMethodName   = "/TransmitService/DeleteFiles"
	TransmitService_DeleteChat_FullMethodName    = "/TransmitService/DeleteChat"
	TransmitService_SaveHistory_FullMethodName   = "/TransmitService/SaveHistory"
	TransmitService_CreateSession_FullMethodName = "/TransmitService/CreateSession"
)

// TransmitServiceClient is the client API for TransmitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitServiceClient interface {
	TransmitFiles(ctx context.Context, in *FilesWithPayload, opts ...grpc.CallOption) (*Status, error)
	TransmitText(ctx context.Context, in *TextWithPayload, opts ...grpc.CallOption) (*Status, error)
	DeleteFiles(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error)
	DeleteChat(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error)
	SaveHistory(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error)
	CreateSession(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error)
}

type transmitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitServiceClient(cc grpc.ClientConnInterface) TransmitServiceClient {
	return &transmitServiceClient{cc}
}

func (c *transmitServiceClient) TransmitFiles(ctx context.Context, in *FilesWithPayload, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, TransmitService_TransmitFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitServiceClient) TransmitText(ctx context.Context, in *TextWithPayload, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, TransmitService_TransmitText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitServiceClient) DeleteFiles(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, TransmitService_DeleteFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitServiceClient) DeleteChat(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, TransmitService_DeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitServiceClient) SaveHistory(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, TransmitService_SaveHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitServiceClient) CreateSession(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, TransmitService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransmitServiceServer is the server API for TransmitService service.
// All implementations must embed UnimplementedTransmitServiceServer
// for forward compatibility.
type TransmitServiceServer interface {
	TransmitFiles(context.Context, *FilesWithPayload) (*Status, error)
	TransmitText(context.Context, *TextWithPayload) (*Status, error)
	DeleteFiles(context.Context, *Payload) (*Status, error)
	DeleteChat(context.Context, *Payload) (*Status, error)
	SaveHistory(context.Context, *Payload) (*Status, error)
	CreateSession(context.Context, *Payload) (*Status, error)
	mustEmbedUnimplementedTransmitServiceServer()
}

// UnimplementedTransmitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransmitServiceServer struct{}

func (UnimplementedTransmitServiceServer) TransmitFiles(context.Context, *FilesWithPayload) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitFiles not implemented")
}
func (UnimplementedTransmitServiceServer) TransmitText(context.Context, *TextWithPayload) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitText not implemented")
}
func (UnimplementedTransmitServiceServer) DeleteFiles(context.Context, *Payload) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedTransmitServiceServer) DeleteChat(context.Context, *Payload) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedTransmitServiceServer) SaveHistory(context.Context, *Payload) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveHistory not implemented")
}
func (UnimplementedTransmitServiceServer) CreateSession(context.Context, *Payload) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedTransmitServiceServer) mustEmbedUnimplementedTransmitServiceServer() {}
func (UnimplementedTransmitServiceServer) testEmbeddedByValue()                         {}

// UnsafeTransmitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitServiceServer will
// result in compilation errors.
type UnsafeTransmitServiceServer interface {
	mustEmbedUnimplementedTransmitServiceServer()
}

func RegisterTransmitServiceServer(s grpc.ServiceRegistrar, srv TransmitServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransmitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransmitService_ServiceDesc, srv)
}

func _TransmitService_TransmitFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesWithPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).TransmitFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransmitService_TransmitFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).TransmitFiles(ctx, req.(*FilesWithPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransmitService_TransmitText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextWithPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).TransmitText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransmitService_TransmitText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).TransmitText(ctx, req.(*TextWithPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransmitService_DeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).DeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransmitService_DeleteFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).DeleteFiles(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransmitService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransmitService_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).DeleteChat(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransmitService_SaveHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).SaveHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransmitService_SaveHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).SaveHistory(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransmitService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransmitService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitServiceServer).CreateSession(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

// TransmitService_ServiceDesc is the grpc.ServiceDesc for TransmitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransmitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransmitService",
	HandlerType: (*TransmitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransmitFiles",
			Handler:    _TransmitService_TransmitFiles_Handler,
		},
		{
			MethodName: "TransmitText",
			Handler:    _TransmitService_TransmitText_Handler,
		},
		{
			MethodName: "DeleteFiles",
			Handler:    _TransmitService_DeleteFiles_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _TransmitService_DeleteChat_Handler,
		},
		{
			MethodName: "SaveHistory",
			Handler:    _TransmitService_SaveHistory_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _TransmitService_CreateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
